import { ConfigService } from '@nestjs/config';
import { AppleLogin, KakaoLogin, NaverLogin } from 'cumuco-nestjs';
import type { Response } from 'express';
import type { SignOptions } from 'jsonwebtoken';
import { EncryptProvider } from '@/common/encrypt';
import { FCMEvent } from '@/event/fcm';
import type { TokenPayloadProps } from '@/interface/token.interface';
import type { SocialType } from '@/interface/user.interface';
import { AdminRepository } from '@/modules/admin/admin.repository';
import { HostRepository } from '@/modules/host/host.repository';
import { UserRepository } from '@/modules/user/user.repository';
import { Jsonwebtoken } from '@/utils/jwt';
import { CreateAdminDTO } from '../admin/dto/create-admin.dto';
import { CouponRepository } from '../coupon/coupon.repository';
import { CreateHostDTO } from '../host/dto';
import { CreateSocialUserDTO } from '../user/dto';
import { AdminAuthDTO, HostAuthDTO, TokenDTO } from './dto';
export declare class AuthService {
    private readonly userRepository;
    private readonly adminRepository;
    private readonly hostRepository;
    private readonly couponRepository;
    private readonly jwt;
    private readonly kakaoService;
    private readonly naverService;
    private readonly appleService;
    private readonly configService;
    private readonly encrypt;
    private readonly fcmEvent;
    private readonly accessTokenExpiresIn;
    private readonly refreshTokenExpiresIn;
    constructor(userRepository: UserRepository, adminRepository: AdminRepository, hostRepository: HostRepository, couponRepository: CouponRepository, jwt: Jsonwebtoken, kakaoService: KakaoLogin, naverService: NaverLogin, appleService: AppleLogin, configService: ConfigService, encrypt: EncryptProvider, fcmEvent: FCMEvent);
    testUserLogin(): Promise<TokenDTO>;
    registerNewUserCoupon(userId: string): Promise<void>;
    socialCallback(props: CreateSocialUserDTO, socialId: string, path: SocialType, token: string, res: Response): Promise<void>;
    appleLoginCallback(code: string, res: Response): Promise<void>;
    getKakaoUser(token: string): Promise<TokenDTO>;
    kakaoLoginCallback(code: string, res: Response): Promise<void>;
    naverLoginCallback(code: string, res: Response): Promise<void>;
    adminLogin(props: AdminAuthDTO): Promise<TokenDTO>;
    adminRegister(props: CreateAdminDTO): Promise<TokenDTO>;
    hostLogin(props: HostAuthDTO): Promise<TokenDTO>;
    hostRegister(props: CreateHostDTO): Promise<TokenDTO>;
    sleep(ms: number): Promise<unknown>;
    refresh(tokens: TokenDTO): Promise<TokenDTO>;
    createTokens<T extends TokenPayloadProps>(value: T, options?: SignOptions): Promise<TokenDTO>;
}
