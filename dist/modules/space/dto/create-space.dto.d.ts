import { CreateOpenHourDTO, CreateOpenHourDTOProps } from '@/modules/host/dto/openHour';
import { CreateLocationDTO, CreateLocationDTOProps } from '@/modules/location/dto';
import { CreateSpaceCategoryDTO, type CreateSpaceCategoryDTOProps } from './category';
import { CreateCautionDTO, type CreateCautionDTOProps } from './caution';
import { CreateBuildingDTO, type CreateBuildingDTOProps } from './facility';
import { CreateHashTagDTO, type CreateHashTagDTOProps } from './hashTag';
import { CreateSpaceHolidayDTO, CreateSpaceHolidayDTOProps } from './holiday';
import { CreateRefundPolicyDTO, type CreateRefundPolicyDTOProps } from './refund';
import { CreateRentalTypeDTO, type CreateRentalTypeDTOProps } from './rental-type';
import { CreateServiceDTO, type CreateServiceDTOProps } from './service';
import { CreateSizeDTO, type CreateSizeDTOProps } from './size';
import { CreateTransportationDTO, type CreateTransportationDTOProps } from './transportaion';
export interface CreateSpaceDTOProps {
    title: string;
    description: string;
    spaceType?: number;
    buildingType?: number;
    thumbnail: string;
    minUser: number;
    maxUser: number;
    overflowUserCost: number;
    overflowUserCount: number;
    isImmediateReservation?: boolean;
    deposit?: number;
    images: string[];
    refundPolicies: CreateRefundPolicyDTOProps[];
    cautions: CreateCautionDTOProps[];
    rentalTypes: CreateRentalTypeDTOProps[];
    location: CreateLocationDTOProps;
    buildings: CreateBuildingDTOProps[];
    services: CreateServiceDTOProps[];
    categories: CreateSpaceCategoryDTOProps[];
    hashTags: CreateHashTagDTOProps[];
    publicTransportations: CreateTransportationDTOProps[];
    sizes: CreateSizeDTOProps[];
    openHours: CreateOpenHourDTOProps[];
    holidays?: CreateSpaceHolidayDTOProps[];
}
export declare class CreateSpaceDTO {
    title: string;
    description: string;
    spaceType?: number;
    buildingType?: number;
    thumbnail: string;
    deposit?: number;
    minUser: number;
    maxUser: number;
    overflowUserCost: number;
    overflowUserCount: number;
    isImmediateReservation?: boolean;
    images: string[];
    refundPolicies: CreateRefundPolicyDTO[];
    cautions: CreateCautionDTO[];
    rentalTypes: CreateRentalTypeDTO[];
    location: CreateLocationDTO;
    buildings: CreateBuildingDTO[];
    services: CreateServiceDTO[];
    categories: CreateSpaceCategoryDTO[];
    hashTags: CreateHashTagDTO[];
    publicTransportations: CreateTransportationDTO[];
    sizes: CreateSizeDTO[];
    openHours: CreateOpenHourDTO[];
    holidays?: CreateSpaceHolidayDTO[];
    constructor(props?: CreateSpaceDTOProps);
    validateRefundPolicies(): void;
}
