import { Prisma } from '@prisma/client';
import { PrismaService, TransactionPrisma } from '@/database/prisma.service';
import { CreateSpaceDTO, SpaceDetailDTO, SpaceDTO, SpaceIdsDTO, UpdateSpaceDTO } from './dto';
import { CreateSpaceCategoryDTO, SpaceCategoryDTO } from './dto/category';
import { BuildingDTO, CreateBuildingDTO } from './dto/facility';
import { CreateHashTagDTO, HashTagDTO } from './dto/hashTag';
import { RefundPolicyDTO } from './dto/refund';
import { CreateServiceDTO, ServiceDTO } from './dto/service';
import { RentalTypeRepository } from './rental-type/rental-type.repository';
export declare class SpaceRepository {
    private readonly database;
    private readonly rentalTypeRepository;
    constructor(database: PrismaService, rentalTypeRepository: RentalTypeRepository);
    findSpaceIds(): Promise<SpaceIdsDTO[]>;
    findSpacesWithSQL(sql: Prisma.Sql, userId?: string): Promise<SpaceDTO[]>;
    findSpace(id: string, userId?: string): Promise<SpaceDetailDTO>;
    findCommonSpace(id: string, userId?: string): Promise<SpaceDTO>;
    countSpaces(args?: Prisma.SpaceCountArgs): Promise<number>;
    countSpacesWithSQL(sql: Prisma.Sql): Promise<any>;
    findSpaces(args?: Prisma.SpaceFindManyArgs, userId?: string): Promise<SpaceDTO[]>;
    findRefundPolicyBySpaceId(spaceId: string): Promise<RefundPolicyDTO[]>;
    createSpace(hostId: string, data: CreateSpaceDTO): Promise<string>;
    updateSpace(spaceId: string, data: UpdateSpaceDTO): Promise<void>;
    updateSpaceOrder(id: string, orderNo: number): Promise<void>;
    deleteSpaceOrder(id: string): Promise<void>;
    deleteSpace(id: string): Promise<void>;
    hardDeleteSpace(id: string): Promise<void>;
    findOrCreateBuildings(prisma: TransactionPrisma, data: CreateBuildingDTO[]): Promise<BuildingDTO[]>;
    findOrCreateServices(prisma: TransactionPrisma, data: CreateServiceDTO[]): Promise<ServiceDTO[]>;
    findOrCreateCategories(prisma: TransactionPrisma, data: CreateSpaceCategoryDTO[]): Promise<SpaceCategoryDTO[]>;
    findOrCreateHashTags(prisma: TransactionPrisma, data: CreateHashTagDTO[]): Promise<HashTagDTO[]>;
    createInterest(userId: string, spaceId: string): Promise<void>;
    deleteInterest(userId: string, spaceId: string): Promise<void>;
    checkIsInterested(userId: string, spaceId: string): Promise<boolean>;
}
