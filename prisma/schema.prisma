generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

// generator dbml {
//   provider              = "prisma-dbml-generator"
//   includeRelationFields = false
//   projectDatabaseType   = "mysql"
//   projectName           = "roof"
// }

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Holiday {
  id    String @id @default(uuid())
  name  String @db.VarChar(120)
  year  String
  month String
  day   String
}

model AppInfo {
  id             String @id @default(uuid())
  iosVersion     String @db.VarChar(20)
  androidVersion String @db.VarChar(20)
}

model FAQ {
  id       String @id @default(uuid())
  question String @db.VarChar(120)
  answer   String @db.MediumText
  order    Int    @default(0) @db.TinyInt
}

model Announcement {
  id      String @id @default(uuid())
  title   String @db.VarChar(120)
  content String @db.MediumText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Curation {
  id        String  @id @default(uuid())
  title     String  @db.VarChar(30)
  subTitle  String  @db.VarChar(100)
  content   String  @db.MediumText
  thumbnail String
  isMain    Boolean @default(false)

  homeOrderNo Int @default(0) @db.TinyInt
  orderNo     Int @default(0) @db.TinyInt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  spaces    CurationSpace[]
}

model CurationSpace {
  curationId String
  curation   Curation @relation(fields: [curationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId    String
  space      Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderNo    Int      @default(0) @db.TinyInt

  @@id([curationId, spaceId])
}

model Image {
  id  String @id @default(uuid())
  url String

  spaceImages       SpaceImage[]
  spaceReviewImages SpaceReviewImage[]
  exhibitionImages  ExhibitionImage[]
}

model MainImage {
  id        String  @id @default(uuid())
  url       String
  isDefault Boolean @default(false)
}

model Slogan {
  id        String  @id @default(uuid())
  content   String
  isDefault Boolean @default(false)
}

model Space {
  id          String @id @default(uuid())
  //NOTE: 공간 이름
  title       String @db.VarChar(120)
  //NOTE: 공간 소개글
  description String @db.MediumText

  buildingType      Int?   @db.TinyInt //TODO: 추후 정리
  thumbnail         String
  //NOTE: 최소 인원
  minUser           Int    @db.TinyInt
  //NOTE: 최대 인원
  maxUser           Int    @db.TinyInt
  //NOTE: 초과 인원당 추가 비용
  overflowUserCost  Int    @db.MediumInt
  //NOTE: 초과 인원 기준 인원
  overflowUserCount Int    @db.TinyInt
  minCost           Int    @default(0) @db.MediumInt
  minSize           Int    @default(0) @db.SmallInt
  startAt           String @db.VarChar(2)
  endAt             String @db.VarChar(2)

  isImmediateReservation Boolean @default(false)
  isPublic               Boolean @default(false)
  isApproved             Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  hostId String @db.VarChar(120)
  host   Host   @relation(fields: [hostId], references: [id])

  reviews        SpaceReview[]
  reports        SpaceReport[]
  userInterests  SpaceInterest[]
  images         SpaceImage[]
  refundPolicies RefundPolicy[]
  cautions       SpaceCaution[]

  rentalType RentalType[]
  location   SpaceLocation?
  buildings  SpaceBuilding[]
  services   SpaceService[]
  categories SpaceCategory[]
  hashtags   SpaceHashtag[]
  spaceQnAs  SpaceQnA[]

  publicTransportations PublicTransportation[]
  sizes                 SpaceSize[]
  recentSpaces          RecentSpace[]
  blockedTimes          BlockedTime[]
  additionalServices    AdditionalService[]
  exhibitions           ExhibitionSpace[]
  curations             CurationSpace[]
  contentCategories     ContentCategorySpace[]
}

model AdditionalService {
  id String @id @default(uuid())

  name String @db.VarChar(50)
  cost Int    @db.MediumInt

  spaceId      String
  space        Space                       @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservations ReservedAdditionalService[]
}

model RecentSpace {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  viewedAt DateTime @default(now())

  @@id([userId, spaceId])
}

model SpaceSize {
  id      String @id @default(uuid())
  size    Int    @db.SmallInt
  floor   String @db.VarChar(10)
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PublicTransportation {
  id String @id @default(uuid())

  name      String @db.VarChar(120)
  timeTaken Int    @db.TinyInt

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 대여 종류 (시간, 패키지)
model RentalType {
  id         String @id @default(uuid())
  name       String @db.VarChar(120)
  baseCost   Int    @db.MediumInt // 기본 비용
  rentalType Int    @db.TinyInt //INFO: 1 : 시간, 2 : 패키지
  day        Int //INFO: 0 : 일, 1 : 월 , 2 : 화 , 3 : 수 , 4 : 목 , 5 : 금 , 6 : 토  , 7 : 공휴일
  baseHour   Int?   @db.TinyInt // 기본 이용시간
  startAt    Int    @default(0) @db.TinyInt // 시작시간 (시간의 경우 정해 놓은 시간 혹은 24시간 / 패키지는 정해놓은 시간)
  endAt      Int    @default(24) @db.TinyInt // 종료시간 (시간의 경우 정해 놓은 시간 혹은 24시간 / 패키지는 정해놓은 시간)

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  timeCostInfo TimeCostInfo[]
  reservations ReservationRentalType[]
}

//INFO: 시간별 예약 추가 정보
model TimeCostInfo {
  id         String  @id @default(uuid())
  cost       Int     @db.MediumInt
  time       Int     @db.TinyInt
  isPossible Boolean @default(true)

  rentalTypeId String
  rentalType   RentalType @relation(fields: [rentalTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ReservedAdditionalService {
  reservationId       String
  reservation         Reservation       @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  additionalServiceId String
  additionalService   AdditionalService @relation(fields: [additionalServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  count               Int               @default(1)

  @@id([reservationId, additionalServiceId])
}

model ReservationRentalType {
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rentalTypeId  String
  rentalType    RentalType  @relation(fields: [rentalTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  startAt       Int
  endAt         Int

  @@id([reservationId, rentalTypeId])
}

//INFO: 예약 정보
model Reservation {
  id String @id @unique @default(uuid())

  year  String @db.Char(4)
  month String @db.VarChar(2)
  day   String @db.VarChar(2)

  totalCost           Int @db.MediumInt //INFO: 결제 금액 (originalCost - discountCost)
  vatCost             Int @db.MediumInt //INFO: VAT 금액
  discountCost        Int @default(0) @db.MediumInt //INFO: 할인금액 -> 유저 입장에서 할인되는 금액 (모든 쿠폰 정보가 포함)
  serviceDiscountCost Int @default(0) @db.MediumInt
  originalCost        Int @db.MediumInt //INFO: 총액 -> 할인가가 적용되지 않은 금액
  refundCost          Int @default(0) @db.MediumInt

  userCount Int

  orderId       String? @unique //INFO: 주문 번호
  orderResultId String? @unique //INFO: 주문 결과 번호 
  payMethod     Int?    @db.TinyInt //INFO: 결제 방식 : 1 - 포트원, 2 - 토스페이, 3 - 카카오페이
  isApproved    Boolean @default(true) //INFO: 결제 승인 여부

  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  settlementId String?
  settlement   Settlement? @relation(fields: [settlementId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  payedAt            DateTime?
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  deletedAt          DateTime?
  spaceReviews       SpaceReview[]
  userCoupon         UserCoupon[]
  additionalServices ReservedAdditionalService[]
  rentalTypes        ReservationRentalType[]
}

model BlockedTime {
  id String @id @unique @default(uuid())

  year    String @db.Char(4)
  month   String @db.VarChar(2)
  day     String @db.VarChar(2)
  startAt Int    @db.TinyInt
  endAt   Int    @db.TinyInt

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 정산 정보
model Settlement {
  id String @id @default(uuid())

  year  String @db.Char(4)
  month String @db.VarChar(2)
  day   String @db.VarChar(2)

  settlementCost Int @db.MediumInt //INFO: 정산 금액
  totalCost      Int @db.MediumInt //INFO: 최종 매출 금액 (originalCost - discountCost)
  vatCost        Int @db.MediumInt //INFO: VAT 금액
  discountCost   Int @default(0) @db.MediumInt //INFO: 할인금액 -> 업주랑 같이 부담하는 할인 금액 (우리가 제공하는 할인은 제외)
  originalCost   Int @db.MediumInt //INFO: 총액 -> 할인가가 적용되지 않은 금액

  isPayed Boolean @default(false)

  reservations Reservation[]
  hostId       String
  host         Host          @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 세금 신고
model TaxReturn {
  id String @id @default(uuid())

  year  String @db.Char(4)
  month String @db.VarChar(2)

  cost Int @db.MediumInt //INFO: 신고 금액

  receiptUrl  String?
  submittedAt DateTime?

  hostId String
  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 공간 신고 (신고가 있는 공간은 유저에게 보이면 안됨)
model SpaceReport {
  id           String @id @default(uuid())
  reportType   Int    @db.TinyInt
  reportStatus Int    @default(1) @db.TinyInt // 1 = 처리중, 2 = 처리완료
  title        String @db.VarChar(120)
  content      String @db.MediumText

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//INFO: 공간 QnA
model SpaceQnA {
  id String @id @default(uuid())

  content String @db.MediumText

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers SpaceQnAAnswer[]
}

//INFO: QnA 답변은 host(공간주인)가 다는건지 Admin(통합관리자)이 다는건지
model SpaceQnAAnswer {
  id      String @id @default(uuid())
  content String @db.MediumText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  spaceQnAId String
  spaceQnA   SpaceQnA @relation(fields: [spaceQnAId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostId     String
  host       Host     @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 공간 리뷰
model SpaceReview {
  id      String  @id @default(uuid())
  content String  @db.MediumText
  spaceId String
  space   Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  score   Int     @db.TinyInt
  isBest  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  images  SpaceReviewImage[]
  answers SpaceReviewAnswer[]
  reports SpaceReviewReport[]
}

//INFO: 공간 리뷰 이미지
model SpaceReviewImage {
  spaceReviewId String
  spaceReview   SpaceReview @relation(fields: [spaceReviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId       String
  image         Image       @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceReviewId, imageId])
}

model SpaceReviewReport {
  id String @id @default(uuid())

  content     String  @db.MediumText
  isProcessed Boolean @default(false)

  spaceReviewId String?
  spaceReview   SpaceReview? @relation(fields: [spaceReviewId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
}

model SpaceReviewAnswer {
  id      String @id @default(uuid())
  content String @db.MediumText

  createdAt DateTime @default(now())

  hostId   String
  host     Host        @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  review   SpaceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId String
}

//INFO: 관심있는 공간 (마이페이지에서 확인 가능)
model SpaceInterest {
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, spaceId])
}

//INFO: 공간 사진
model SpaceImage {
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId String
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceId, imageId])
}

//INFO: 공간 환불 정보
model RefundPolicy {
  id String @id @default(uuid())

  daysBefore Int @db.TinyInt
  refundRate Int @db.TinyInt

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SpaceCaution {
  id      String @id @default(uuid())
  content String
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SpaceBuilding {
  spaceId    String
  space      Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceId, buildingId])
}

model SpaceService {
  spaceId   String
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceId, serviceId])
}

model SpaceCategory {
  spaceId    String
  space      Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceId, categoryId])
}

model SpaceHashtag {
  spaceId   String
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hashtagId String
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceId, hashtagId])
}

//INFO: 공간주인
model Host {
  id String @id @default(uuid())

  name         String  @db.VarChar(20)
  email        String  @unique
  profileImage String?
  phoneNumber  String  @db.Char(11)
  gender       Int     @db.TinyInt
  password     String
  salt         String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  spaces          Space[]
  spaceQnAAnswers SpaceQnAAnswer[]

  hostAccount        HostAccount?
  taxReturns         TaxReturn[]
  spaceReviewAnswers SpaceReviewAnswer[]
  settlements        Settlement[]
}

//INFO: 공간주 사업자 및 계좌 정보
model HostAccount {
  id String @id @default(uuid())

  ownerName                  String @db.VarChar(20)
  bankName                   String @db.VarChar(5)
  businessRegistrationNumber String @db.Char(10)
  account                    String @db.VarChar(40)
  accountOwner               String @db.VarChar(20)

  hostId String @unique
  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 통합 관리자
model Admin {
  id         String  @id @default(uuid())
  name       String  @db.VarChar(20)
  userId     String  @unique
  password   String
  salt       String
  isAccepted Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model User {
  id String @id @default(uuid())

  nickname        String
  email           String?
  phoneNumber     String?   @db.Char(11)
  birthYear       String?   @db.Char(4)
  birthDay        String?   @db.Char(4)
  gender          Int?      @db.TinyInt
  profileImage    String?
  isAdult         Boolean   @default(false)
  isAlarmAccepted Boolean   @default(false)
  isBlocked       Boolean   @default(false)
  unBlockAt       DateTime?
  pushToken       String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  blockedAt DateTime?

  spaceReviews   SpaceReview[]
  spaceReports   SpaceReport[]
  spaceInterests SpaceInterest[]
  spaceQnAs      SpaceQnA[]
  locations      UserLocation[]
  coupons        UserCoupon[]
  socials        UserSocial[]
  curations      Curation[]
  searchRecords  SearchRecord[]
  alarms         UserAlarm[]
  reservations   Reservation[]
  recentSpaces   RecentSpace[]
  reviewReports  SpaceReviewReport[]
}

model UserAlarm {
  id String @id @default(uuid())

  title   String  @db.VarChar(50)
  content String
  link    String?

  alarmAt  DateTime?
  isRead   Boolean   @default(false)
  isPush   Boolean   @default(false)
  isPushed Boolean   @default(false)

  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 유저 검색 기록
model SearchRecord {
  id String @id @default(uuid())

  content String

  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 추천 검색어
model SearchRecommend {
  id String @id @default(uuid())

  content String
}

model UserSocial {
  id         String @id @default(uuid())
  userId     String
  socialId   String @unique
  socialType Int    @db.TinyInt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 유저는 여러 위치를 지정 가능
model UserLocation {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isDefault  Boolean  @default(false)
}

model SpaceLocation {
  id           String @id @default(uuid())
  lat          String @db.VarChar(120)
  lng          String @db.VarChar(120)
  roadAddress  String
  jibunAddress String
  spaceId      String @unique
  space        Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Location {
  id            String         @id @default(uuid())
  lat           String         @db.VarChar(120)
  lng           String         @db.VarChar(120)
  roadAddress   String
  jibunAddress  String
  userLocations UserLocation[]
}

//INFO: 공간 시설
model Building {
  id             String          @id @default(uuid())
  iconPath       String
  name           String
  spaceBuildings SpaceBuilding[]
}

//INFO: 이용 가능한 서비스
model Service {
  id            String         @id @default(uuid())
  iconPath      String
  name          String
  spaceServices SpaceService[]
}

//INFO: 활용 가능한 카테고리 (ex. 회의실, 스터디룸, 세미나실, 오픈스페이스 등)
model Category {
  id                   String           @id @default(uuid())
  name                 String           @db.VarChar(80)
  isHome               Boolean          @default(false)
  isRecommended        Boolean          @default(false)
  iconPath             String?
  spaceUsageCategories SpaceCategory[]
  couponCategories     CouponCategory[]
}

model ContentCategory {
  id        String                 @id @default(uuid())
  name      String                 @db.VarChar(80)
  highlight String?                @db.VarChar(80)
  spaces    ContentCategorySpace[]
}

model ContentCategorySpace {
  orderNo           Int             @default(0)
  contentCategoryId String
  contentCategory   ContentCategory @relation(fields: [contentCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId           String
  space             Space           @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([contentCategoryId, spaceId])
}

model CouponCategory {
  couponId   String
  coupon     Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([couponId, categoryId])
}

//INFO: 해시태그
model Hashtag {
  id            String         @id @default(uuid())
  name          String
  spaceHashtags SpaceHashtag[]
}

//INFO: 유저 쿠폰
model UserCoupon {
  id String @id @default(uuid())

  //INFO: 기본 6자리 랜덤 생성
  count            Int      @default(1) @db.TinyInt
  usageDateStartAt DateTime @db.DateTime
  usageDateEndAt   DateTime @db.DateTime
  createdAt        DateTime @default(now())

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  couponId String @unique
  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

//INFO: 쿠폰
model Coupon {
  id                  String    @id @default(uuid())
  name                String    @db.VarChar(80)
  discountType        Int       @db.TinyInt //INFO: 0: 정액, 1: 정률
  discountValue       Int       @db.MediumInt
  description         String    @db.VarChar(100)
  code                String    @unique @db.Char(10)
  isLupinPay          Boolean   @default(false)
  defaultDueDateStart DateTime? @db.DateTime
  defaultDueDay       Int       @default(0) @db.SmallInt
  link                String?

  userCoupons      UserCoupon[]
  couponCategories CouponCategory[]
  exhibitions      ExhibitionCoupon[]
}

model ExhibitionImage {
  exhibitionId String
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId      String
  image        Image      @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([exhibitionId, imageId])
}

model ExhibitionSpace {
  exhibitionId String
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId      String
  space        Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([exhibitionId, spaceId])
}

model ExhibitionCoupon {
  exhibitionId String
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  couponId     String
  coupon       Coupon     @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([exhibitionId, couponId])
}

model Exhibition {
  id String @id @default(uuid())

  title       String @db.VarChar(80)
  thumbnail   String
  description String @db.VarChar(120)

  content String @db.MediumText

  startAt DateTime @db.DateTime
  endAt   DateTime @db.DateTime

  isShow Boolean @default(false)

  createdAt DateTime @default(now())

  images  ExhibitionImage[]
  spaces  ExhibitionSpace[]
  coupons ExhibitionCoupon[]
}
