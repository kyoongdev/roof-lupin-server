generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["views"]
}

// generator dbml {
//   provider              = "prisma-dbml-generator"
//   includeRelationFields = false
//   projectDatabaseType   = "mysql"
//   projectName           = "roof"
// }

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AppInfo {
  id             String @id @default(uuid())
  iosVersion     String @db.VarChar(20)
  androidVersion String @db.VarChar(20)
}

model FAQ {
  id       String @id @default(uuid())
  question String @db.VarChar(120)
  answer   String @db.MediumText
  order    Int    @default(0) @db.TinyInt
}

model Announcement {
  id      String @id @default(uuid())
  title   String @db.VarChar(120)
  content String @db.MediumText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Curation {
  id       String @id @default(uuid())
  title    String @db.VarChar(30)
  subTitle String @db.VarChar(100)
  content  String @db.MediumText

  thumbnail String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id  String @id @default(uuid())
  url String

  spaceImages       SpaceImage[]
  spaceReviewImages SpaceReviewImage[]
}

model MainImage {
  id        String  @id @default(uuid())
  url       String
  isDefault Boolean @default(false)
}

model Slogan {
  id        String  @id @default(uuid())
  content   String
  isDefault Boolean @default(false)
}

model MainCategory {
  id String @id @default(uuid())

  highlightTitle String @db.VarChar(120)
  title          String @db.VarChar(120)
  order          Int    @default(0) @db.TinyInt

  spaces Space[]
}

model Space {
  id           String @id @default(uuid())
  //NOTE: 공간 이름
  title        String @db.VarChar(120)
  //NOTE: 공간 소개글
  description  String
  averageScore Int    @default(0) @db.TinyInt

  spaceType         Int?   @db.TinyInt
  buildingType      Int?   @db.TinyInt
  thumbnail         String
  //NOTE: 최소 인원
  minUser           Int    @db.TinyInt
  //NOTE: 최대 인원
  maxUser           Int    @db.TinyInt
  //NOTE: 초과 인원당 추가 비용
  overflowUserCost  Int    @db.MediumInt
  //NOTE: 초과 인원 기준 인원
  overflowUserCount Int    @db.TinyInt
  minCost           Int    @db.MediumInt
  minSize           Int    @db.SmallInt

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  hostId String @db.VarChar(120)
  host   Host   @relation(fields: [hostId], references: [id])

  reviews        SpaceReview[]
  reports        SpaceReport[]
  userInterests  SpaceInterest[]
  images         SpaceImage[]
  refundPolicies RefundPolicy[]
  cautions       SpaceCaution[]

  rentalType            RentalType[]
  location              SpaceLocation?
  facilities            SpaceFacility[]
  services              SpaceService[]
  categories            SpaceCategory[]
  hashtags              SpaceHashtag[]
  spaceQnAs             SpaceQnA[]
  mainCategory          MainCategory?          @relation(fields: [mainCategoryId], references: [id])
  mainCategoryId        String?
  publicTransportations PublicTransportation[]
  sizes                 SpaceSize[]
}

model SpaceSize {
  id      String @id @default(uuid())
  size    Int    @db.SmallInt
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
}

model PublicTransportation {
  id String @id @default(uuid())

  name      String @db.VarChar(120)
  timeTaken Int    @db.TinyInt

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
}

view SpaceView {
  id   String @unique
  cost Int
}

//INFO: 대여 종류 (시간, 패키지)
model RentalType {
  id         String @id @default(uuid())
  name       String @db.VarChar(120)
  baseCost   Int    @db.MediumInt // 기본 비용
  rentalType Int    @db.TinyInt // 1 : 시간, 2 : 패키지
  baseHour   Int?   @db.TinyInt // 기본 이용시간
  startAt    Int    @default(0) @db.TinyInt // 시작시간 (시간의 경우 정해 놓은 시간 혹은 24시간 / 패키지는 정해놓은 시간)
  endAt      Int    @default(24) @db.TinyInt // 종료시간 (시간의 경우 정해 놓은 시간 혹은 24시간 / 패키지는 정해놓은 시간)

  spaceId      String
  space        Space          @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservations Reservation[]
  timeCostInfo TimeCostInfo[]
}

//INFO: 시간별 예약 추가 정보
model TimeCostInfo {
  id         String  @id @default(uuid())
  cost       Int     @db.MediumInt
  time       Int     @db.TinyInt
  isPossible Boolean @default(true)

  rentalTypeId String     @unique
  rentalType   RentalType @relation(fields: [rentalTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 예약 정보
model Reservation {
  id    String @id @unique @default(uuid())
  year  String @db.Char(4)
  month String @db.VarChar(2)
  day   String @db.VarChar(2)

  startAt Int @db.TinyInt
  endAt   Int @db.TinyInt
  cost    Int @db.MediumInt

  rentalTypeId String
  rentalType   RentalType @relation(fields: [rentalTypeId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

//INFO: 공간 신고 (신고가 있는 공간은 유저에게 보이면 안됨)
model SpaceReport {
  id           String @id @default(uuid())
  reportType   Int    @db.TinyInt
  reportStatus Int    @default(1) @db.TinyInt // 1 = 처리중, 2 = 처리완료
  title        String @db.VarChar(120)
  content      String @db.MediumText

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//INFO: 공간 QnA
model SpaceQnA {
  id String @id @default(uuid())

  content String @db.MediumText

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers SpaceQnAAnswer[]
}

//INFO: QnA 답변은 host(공간주인)가 다는건지 Admin(통합관리자)이 다는건지
model SpaceQnAAnswer {
  id      String @id @default(uuid())
  content String @db.MediumText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  spaceQnAId String
  spaceQnA   SpaceQnA @relation(fields: [spaceQnAId], references: [id])
  hostId     String
  host       Host     @relation(fields: [hostId], references: [id])
}

//INFO: 공간 리뷰
model SpaceReview {
  id      String  @id @default(uuid())
  content String  @db.MediumText
  spaceId String
  space   Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  score   Int     @db.TinyInt
  isBest  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images SpaceReviewImage[]
}

//INFO: 공간 리뷰 이미지
model SpaceReviewImage {
  spaceReviewId String
  spaceReview   SpaceReview @relation(fields: [spaceReviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId       String
  image         Image       @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceReviewId, imageId])
}

//INFO: 관심있는 공간 (마이페이지에서 확인 가능)
model SpaceInterest {
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, spaceId])
}

//INFO: 공간 사진
model SpaceImage {
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
  imageId String
  image   Image  @relation(fields: [imageId], references: [id])

  @@id([spaceId, imageId])
}

//INFO: 공간 환불 정보
model RefundPolicy {
  id          String @id @default(uuid())
  refundRate  Int    @db.TinyInt
  dueDate     Int    @db.TinyInt
  dueDateType Int    @db.TinyInt // 1 = 일, 2 = 시간

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
}

model SpaceCaution {
  id      String @id @default(uuid())
  content String
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
}

model SpaceLocation {
  spaceId    String   @unique
  space      Space    @relation(fields: [spaceId], references: [id])
  locationId String   @unique
  location   Location @relation(fields: [locationId], references: [id])

  @@id([spaceId, locationId])
}

model SpaceFacility {
  spaceId    String
  space      Space    @relation(fields: [spaceId], references: [id])
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  @@id([spaceId, facilityId])
}

model SpaceService {
  spaceId   String
  space     Space   @relation(fields: [spaceId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([spaceId, serviceId])
}

model SpaceCategory {
  spaceId    String
  space      Space    @relation(fields: [spaceId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([spaceId, categoryId])
}

model SpaceHashtag {
  spaceId   String
  space     Space   @relation(fields: [spaceId], references: [id])
  hashtagId String
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])

  @@id([spaceId, hashtagId])
}

//INFO: 공간주인
model Host {
  id String @id @default(uuid())

  name         String  @db.VarChar(20)
  email        String  @unique
  profileImage String?
  phoneNumber  String  @db.Char(11)
  gender       Int     @db.TinyInt
  password     String
  salt         String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  spaces          Space[]
  spaceQnAAnswers SpaceQnAAnswer[]

  hostAccount HostAccount?
}

//INFO: 공간주 사업자 및 계좌 정보
model HostAccount {
  id String @id @default(uuid())

  ownerName                  String @db.VarChar(20)
  bankName                   Int    @db.TinyInt
  businessRegistrationNumber String @db.Char(10)
  account                    String @db.VarChar(40)
  accountOwner               String @db.VarChar(20)

  hostId String @unique
  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 통합 관리자
model Admin {
  id         String  @id @default(uuid())
  name       String  @db.VarChar(20)
  userId     String  @unique
  password   String
  salt       String
  isAccepted Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model User {
  id           String  @id @default(uuid())
  name         String? @db.VarChar(20)
  nickname     String
  email        String?
  phoneNumber  String? @db.Char(11)
  birth        String? @db.Char(8)
  gender       Int?    @db.TinyInt
  profileImage String?
  isAdult      Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  spaceReviews   SpaceReview[]
  spaceReports   SpaceReport[]
  spaceInterests SpaceInterest[]
  spaceQnAs      SpaceQnA[]
  locations      UserLocation[]
  coupons        UserCoupon[]
  socials        UserSocial[]
  curations      Curation[]
  searchRecords  SearchRecord[]
  alarms         UserAlarm[]
  reservations   Reservation[]
}

model UserAlarm {
  id String @id @default(uuid())

  title   String  @db.VarChar(50)
  content String
  link    String?

  alarmAt  DateTime?
  isRead   Boolean   @default(false)
  isPush   Boolean   @default(false)
  isPushed Boolean   @default(false)

  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 유저 검색 기록
model SearchRecord {
  id String @id @default(uuid())

  content String

  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 추천 검색어
model SearchRecommend {
  id String @id @default(uuid())

  content String
}

model UserSocial {
  id         String @id @default(uuid())
  userId     String
  socialId   String @unique
  socialType Int    @db.TinyInt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 유저는 여러 위치를 지정 가능
model UserLocation {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  isDefault  Boolean  @default(false)
}

model Location {
  id            String          @id @default(uuid())
  lat           String          @db.VarChar(120)
  lng           String          @db.VarChar(120)
  roadAddress   String
  jibunAddress  String
  spaceLocation SpaceLocation[]
  userLocations UserLocation[]

  @@unique([lat, lng])
}

//INFO: 공간 주변 시설
model Facility {
  id              String          @id @default(uuid())
  iconPath        String
  name            String
  spaceFacilities SpaceFacility[]
}

//INFO: 이용 가능한 서비스
model Service {
  id            String         @id @default(uuid())
  iconPath      String
  name          String
  spaceServices SpaceService[]
}

//INFO: 활용 가능한 카테고리 (ex. 회의실, 스터디룸, 세미나실, 오픈스페이스 등)
model Category {
  id                   String          @id @default(uuid())
  name                 String          @db.VarChar(80)
  isHome               Boolean         @default(false)
  spaceUsageCategories SpaceCategory[]
}

//INFO: 해시태그
model Hashtag {
  id            String         @id @default(uuid())
  name          String
  spaceHashtags SpaceHashtag[]
}

//INFO: 유저 쿠폰
model UserCoupon {
  id String @id @default(uuid())

  count   Int      @default(1) @db.TinyInt
  //INFO: 기본 6자리 랜덤 생성
  dueDate DateTime @db.DateTime

  createdAt DateTime @default(now())

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  couponId String
  coupon   Coupon @relation(fields: [couponId], references: [id])
}

//INFO: 쿠폰
model Coupon {
  id            String @id @default(uuid())
  name          String @db.VarChar(80)
  discountType  Int    @db.TinyInt
  discountValue Int    @db.MediumInt
  description   String @db.VarChar(100)
  code          String @unique @default(uuid()) @db.Char(8)

  userCoupons UserCoupon[]
}
