generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

// generator dbml {
//   provider              = "prisma-dbml-generator"
//   includeRelationFields = false
//   projectDatabaseType   = "mysql"
//   projectName           = "roof"
// }

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Image {
  id  String @id @default(uuid())
  url String

  spaceImages       SpaceImage[]
  spaceReviewImages SpaceReviewImage[]
  loginBackground   LoginBackground[]
}

model HomeImage {
  id        String  @id @default(uuid())
  url       String
  isDefault Boolean @default(false)
}

model Slogan {
  id        String  @id @default(uuid())
  content   String
  isDefault Boolean @default(false)
}

model Space {
  id                String @id @default(uuid())
  title             String @db.VarChar(120)
  description       String
  size              Int    @db.SmallInt
  spaceType         Int    @db.TinyInt
  buildingType      Int    @db.TinyInt
  //NOTE: 공간 소개글
  spaceIntroduction String @db.MediumText
  //NOTE: 최소 인원
  minUser           Int    @db.TinyInt
  //NOTE: 최대 인원
  maxUser           Int    @db.TinyInt
  //NOTE: 초과 인원당 추가 비용
  overflowUserCost  Int    @db.MediumInt
  //NOTE: 초과 인원 기준 인원
  overflowUserCount Int    @db.TinyInt
  //NOTE: 최소 대여시간
  minHour           Int    @db.TinyInt

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  hostId String @db.VarChar(120)
  host   Host   @relation(fields: [hostId], references: [id])

  reviews         SpaceReview[]
  reports         SpaceReport[]
  userInterests   SpaceInterest[]
  userLikes       SpaceLike[]
  images          SpaceImage[]
  guideLines      SpaceGuideLine[]
  cautions        SpaceCaution[]
  //INFO: discountInfo는 1개만 존재하는지, 여러개 존재하는지 확인 필요
  discountInfo    SpaceDiscountInfo[]
  //INFO: discountInfo는 1개만 존재하는지, 여러개 존재하는지 확인 필요
  rentalType      RentalType[]
  location        SpaceLocation?
  facilities      SpaceFacility[]
  services        SpaceService[]
  usageCategories SpaceUsageCategory[]
  hashTags        SpaceHashTag[]
  spaceQnAs       SpaceQnA[]
}

//INFO: 대여 종류 (시간, 패키지)
model RentalType {
  id         String @id @default(uuid())
  name       String @db.VarChar(120)
  baseCost   Int    @db.MediumInt // 기본 비용
  rentalType Int    @db.TinyInt // 1 : 시간, 2 : 패키지
  baseHour   Int?   @db.TinyInt // 기본 이용시간
  startAt    Int    @db.TinyInt // 시작시간 (시간의 경우 정해 놓은 시간 혹은 24시간 / 패키지는 정해놓은 시간)
  endAt      Int    @db.TinyInt // 종료시간 (시간의 경우 정해 놓은 시간 혹은 24시간 / 패키지는 정해놓은 시간)

  spaceId      String
  space        Space         @relation(fields: [spaceId], references: [id])
  reservations Reservation[]
  timeCostInfo TimeCostInfo?
}

//INFO: 시간별 예약 추가 정보
model TimeCostInfo {
  id      String @id @default(uuid())
  cost    Int    @db.MediumInt
  startAt Int    @db.TinyInt
  endAt   Int    @db.TinyInt

  rentalTypeId String     @unique
  rentalType   RentalType @relation(fields: [rentalTypeId], references: [id])
}

//INFO: 예약 정보
model Reservation {
  id    String @id @unique @default(uuid())
  year  String @db.Char(4)
  month String @db.VarChar(2)
  day   String @db.VarChar(2)

  startAt Int @db.TinyInt
  endAt   Int @db.TinyInt
  cost    Int @db.MediumInt

  rentalTypeId String
  rentalType   RentalType @relation(fields: [rentalTypeId], references: [id])
}

//INFO: 공간 신고 (신고가 있는 공간은 유저에게 보이면 안됨)
model SpaceReport {
  id           String @id @default(uuid())
  reportType   Int    @db.TinyInt
  reportStatus Int    @default(1) @db.TinyInt // 1 = 처리중, 2 = 처리완료
  title        String @db.VarChar(120)
  content      String @db.MediumText

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

//INFO: 공간 QnA
model SpaceQnA {
  id String @id @default(uuid())

  content String @db.MediumText

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  answers SpaceQnAAnswer[]
}

//INFO: QnA 답변은 host(공간주인)가 다는건지 Admin(통합관리자)이 다는건지
model SpaceQnAAnswer {
  id      String @id @default(uuid())
  content String @db.MediumText

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  spaceQnAId String
  spaceQnA   SpaceQnA @relation(fields: [spaceQnAId], references: [id])
  hostId     String
  host       Host     @relation(fields: [hostId], references: [id])
}

//INFO: 공간 리뷰
model SpaceReview {
  id      String @id @default(uuid())
  content String @db.MediumText
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  score   Int    @db.TinyInt

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  images SpaceReviewImage[]
}

//INFO: 공간 리뷰 이미지
model SpaceReviewImage {
  spaceReviewId String
  spaceReview   SpaceReview @relation(fields: [spaceReviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId       String
  image         Image       @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceReviewId, imageId])
}

//INFO: 관심있는 공간 (마이페이지에서 확인 가능)
model SpaceInterest {
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, spaceId])
}

//INFO: 공간 좋아요
model SpaceLike {
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, spaceId])
}

//INFO: 공간 사진
model SpaceImage {
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
  imageId String
  image   Image  @relation(fields: [imageId], references: [id])

  @@id([spaceId, imageId])
}

//INFO: 공간 이용 정보
model SpaceGuideLine {
  id      String @id @default(uuid())
  content String
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
}

model SpaceCaution {
  id      String @id @default(uuid())
  content String
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
}

//INFO: 공간 기본 할인 정보
model SpaceDiscountInfo {
  id            String @id @default(uuid())
  discountType  Int    @db.TinyInt
  discountValue Int    @db.MediumInt
  name          String @db.VarChar(120)
  content       String
  description   String
  spaceId       String
  space         Space  @relation(fields: [spaceId], references: [id])
}

model SpaceLocation {
  spaceId    String   @unique
  space      Space    @relation(fields: [spaceId], references: [id])
  locationId String   @unique
  location   Location @relation(fields: [locationId], references: [id])

  @@id([spaceId, locationId])
}

model SpaceFacility {
  spaceId    String
  space      Space    @relation(fields: [spaceId], references: [id])
  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id])

  @@id([spaceId, facilityId])
}

model SpaceService {
  spaceId   String
  space     Space   @relation(fields: [spaceId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([spaceId, serviceId])
}

model SpaceUsageCategory {
  spaceId         String
  space           Space         @relation(fields: [spaceId], references: [id])
  usageCategoryId String
  usageCategory   UsageCategory @relation(fields: [usageCategoryId], references: [id])

  @@id([spaceId, usageCategoryId])
}

model SpaceHashTag {
  spaceId   String
  space     Space   @relation(fields: [spaceId], references: [id])
  hashTagId String
  hashTag   HashTag @relation(fields: [hashTagId], references: [id])

  @@id([spaceId, hashTagId])
}

//INFO: 공간주인
model Host {
  id String @id @default(uuid())

  name         String  @db.VarChar(20)
  email        String  @unique
  profileImage String?
  phoneNumber  String  @db.Char(11)
  gender       Int     @db.TinyInt
  password     String
  salt         String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  spaces          Space[]
  spaceQnAAnswers SpaceQnAAnswer[]

  hostAccount HostAccount?
}

//INFO: 공간주 사업자 및 계좌 정보
model HostAccount {
  id String @id @default(uuid())

  ownerName                  String @db.VarChar(20)
  bankName                   Int    @db.TinyInt
  businessRegistrationNumber String @db.Char(10)
  account                    String @db.VarChar(40)
  accountOwner               String @db.VarChar(20)

  hostId String @unique
  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 통합 관리자
model Admin {
  id         String  @id @default(uuid())
  name       String  @db.VarChar(20)
  userId     String
  password   String
  salt       String
  isAccepted Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model User {
  id           String  @id @default(uuid())
  name         String? @db.VarChar(20)
  nickname     String
  email        String?
  phoneNumber  String? @db.Char(11)
  birth        String? @db.Char(8)
  gender       Int?    @db.TinyInt
  profileImage String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  spaceReviews   SpaceReview[]
  spaceReports   SpaceReport[]
  spaceInterests SpaceInterest[]
  spaceLikes     SpaceLike[]
  spaceQnAs      SpaceQnA[]
  locations      UserLocation[]
  coupons        UserCoupon[]
  socials        UserSocial[]
}

model UserSocial {
  id         String @id @default(uuid())
  userId     String
  socialId   String @unique
  socialType Int    @db.TinyInt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 유저는 여러 위치를 지정 가능
model UserLocation {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  isDefault  Boolean  @default(false)
}

model Location {
  id            String         @id @default(uuid())
  lat           String         @db.VarChar(120)
  lng           String         @db.VarChar(120)
  roadAddress   String
  jibunAddress  String
  spaceLocation SpaceLocation?
  userLocations UserLocation[]
}

//INFO: 공간 주변 시설
model Facility {
  id              String          @id @default(uuid())
  iconPath        String
  name            String
  spaceFacilities SpaceFacility[]
}

//INFO: 이용 가능한 서비스
model Service {
  id            String         @id @default(uuid())
  iconPath      String
  name          String
  spaceServices SpaceService[]
}

//INFO: 활용 가능한 카테고리 (ex. 회의실, 스터디룸, 세미나실, 오픈스페이스 등)
model UsageCategory {
  id                   String               @id @default(uuid())
  name                 String               @db.VarChar(80)
  spaceUsageCategories SpaceUsageCategory[]
}

//INFO: 해시태그
model HashTag {
  id            String         @id @default(uuid())
  name          String
  spaceHashTags SpaceHashTag[]
}

//INFO: 유저 쿠폰
model UserCoupon {
  id       String @id @default(uuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  couponId String
  coupon   Coupon @relation(fields: [couponId], references: [id])
  count    Int    @default(1) @db.TinyInt
  //INFO: 기본 6자리 랜덤 생성
  code     String @unique @default(dbgenerated("(left(uuid(),6))")) @db.Char(6)

  createdAt DateTime @default(now())
}

//INFO: 쿠폰
model Coupon {
  id            String       @id @default(uuid())
  name          String       @db.VarChar(80)
  discountType  Int          @db.TinyInt
  discountValue Int          @db.MediumInt
  description   String       @db.VarChar(100)
  dueDate       DateTime     @db.DateTime
  userCoupons   UserCoupon[]
}

//INFO: 로그인 페이지 배경
model LoginBackground {
  id String @id @default(uuid())

  isDefault Boolean @default(false)

  imageId String
  image   Image  @relation(fields: [imageId], references: [id])
}
