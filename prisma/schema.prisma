generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model LocationFilterGroup {
  id              String           @id @default(uuid())
  name            String           @db.VarChar(20)
  locationFilters LocationFilter[]
}

model LocationFilter {
  id String @id @default(uuid())

  group   LocationFilterGroup   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId String
  topics  LocationFilterTopic[]
}

model LocationFilterTopic {
  id   String @id @default(uuid())
  name String @db.VarChar(20)

  locationFilterId String
  locationFilter   LocationFilter @relation(fields: [locationFilterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Icon {
  id   String @id @default(uuid())
  name String @db.VarChar(120)
  url  String

  building Building[]
  service  Service[]
  category Category[]
}

model FrequentQuestion {
  id       String @id @default(uuid())
  question String @db.VarChar(120)
  answer   String @db.MediumText
}

model HomeContents {
  id String @id @default(uuid())

  orderNo Int? @db.TinyInt

  contentsCategory ContentCategory?
  exhibition       Exhibition?
  ranking          Ranking?
}

model Holiday {
  id    String @id @default(uuid())
  name  String @db.VarChar(120)
  year  Int
  month Int
  day   Int
}

model AppInfo {
  id             String @id @default(uuid())
  iosVersion     String @db.VarChar(20)
  androidVersion String @db.VarChar(20)
}

model FAQ {
  id       String  @id @default(uuid())
  question String  @db.VarChar(120)
  answer   String? @db.MediumText

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Announcement {
  id      String @id @default(uuid())
  title   String @db.VarChar(120)
  content String @db.MediumText

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Curation {
  id        String  @id @default(uuid())
  title     String  @db.VarChar(30)
  subTitle  String  @db.VarChar(100)
  content   String  @db.MediumText
  thumbnail String
  isMain    Boolean @default(false)

  orderNo Int?

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  spaces CurationSpace[]
}

model CurationSpace {
  curationId String
  curation   Curation @relation(fields: [curationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId    String
  space      Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderNo    Int?

  @@id([curationId, spaceId])
}

model Image {
  id  String @id @default(uuid())
  url String

  spaceImages       SpaceImage[]
  spaceReviewImages SpaceReviewImage[]
  exhibitionImages  ExhibitionImage[]
}

model Ranking {
  id          String @id @default(uuid())
  name        String
  description String

  deletedAt DateTime?

  spaces         RankingSpaces[]
  homeContents   HomeContents?   @relation(fields: [homeContentsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homeContentsId String?         @unique
}

model RankingSpaces {
  spaceId   String
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rankingId String
  ranking   Ranking @relation(fields: [rankingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderNo   Int

  @@id([spaceId, rankingId])
}

model Space {
  id          String @id @default(uuid())
  //NOTE: 공간 이름
  title       String @db.VarChar(120)
  //NOTE: 공간 소개글
  description String @db.MediumText

  buildingType      Int?    @db.TinyInt //TODO: 추후 정리
  thumbnail         String
  //NOTE: 최소 인원
  minUser           Int     @db.TinyInt
  //NOTE: 최대 인원
  maxUser           Int     @db.TinyInt
  //NOTE: 초과 인원당 추가 비용
  overflowUserCost  Int     @db.MediumInt
  //NOTE: 초과 인원 기준 인원
  overflowUserCount Int     @db.TinyInt
  minSize           Int     @default(0) @db.SmallInt
  deposit           Int?    @db.MediumInt
  link              String? @db.VarChar(255)
  phoneNumber       String  @db.VarChar(11)

  isImmediateReservation Boolean @default(false)
  isPublic               Boolean @default(false)
  isApproved             Boolean @default(true)
  isMain                 Boolean @default(false)
  orderNo                Int?    @db.TinyInt

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  hostId String @db.VarChar(120)
  host   Host   @relation(fields: [hostId], references: [id])

  reviews               SpaceReview[]
  reports               UserReport[]
  userInterests         SpaceInterest[]
  images                SpaceImage[]
  refundPolicies        RefundPolicy[]
  cautions              SpaceCaution[]
  rentalType            RentalType[]
  location              SpaceLocation?
  buildings             SpaceBuilding[]
  services              SpaceService[]
  categories            SpaceCategory[]
  hashTags              SpaceHashTag[]
  spaceQnAs             SpaceQnA[]
  publicTransportations PublicTransportation[]
  sizes                 SpaceSize[]
  recentSpaces          RecentSpace[]
  blockedTimes          BlockedTime[]
  exhibitions           ExhibitionSpace[]
  curations             CurationSpace[]
  contentCategories     ContentCategorySpace[]
  rankings              RankingSpaces[]
  openHours             OpenHour[]
  holidays              SpaceHoliday[]
  reservations          Reservation[]
}

//INFO: 공간 영업시간
model OpenHour {
  id String @id @default(uuid())

  startAt Int @db.TinyInt
  endAt   Int @db.TinyInt
  day     Int @db.TinyInt

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 공간 휴무일
model SpaceHoliday {
  id String @id @default(uuid())

  day      Int @db.TinyInt
  interval Int @db.TinyInt //INFO: 1, 2, 3은 주 단위, 4는 월 단위

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AdditionalService {
  id String @id @default(uuid())

  name        String  @db.VarChar(50)
  cost        Int     @db.MediumInt
  description String? @db.VarChar(100)
  tooltip     String? @db.VarChar(200)
  maxCount    Int?    @db.TinyInt

  reservations ReservedAdditionalService[]
  RentalType   RentalType                  @relation(fields: [rentalTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rentalTypeId String
}

model RecentSpace {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  viewedAt DateTime @default(now())

  @@id([userId, spaceId])
}

model SpaceSize {
  id      String  @id @default(uuid())
  size    Int     @db.SmallInt
  floor   Int     @db.TinyInt
  isRoof  Boolean @default(false)
  spaceId String
  space   Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PublicTransportation {
  id String @id @default(uuid())

  name      String @db.VarChar(120)
  timeTaken Int    @db.TinyInt

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 대여 종류 (시간, 패키지)
model RentalType {
  id         String @id @default(uuid())
  name       String @db.VarChar(120)
  baseCost   Int    @db.MediumInt // 기본 비용
  rentalType Int    @db.TinyInt //INFO: 1 : 시간, 2 : 패키지
  day        Int //INFO: 0 : 일, 1 : 월 , 2 : 화 , 3 : 수 , 4 : 목 , 5 : 금 , 6 : 토  , 7 : 공휴일
  baseHour   Int?   @db.TinyInt // 기본 이용시간
  startAt    Int    @default(0) @db.TinyInt // 시작시간 (시간의 경우 정해 놓은 시간 혹은 24시간 / 패키지는 정해놓은 시간)
  endAt      Int    @default(24) @db.TinyInt // 종료시간 (시간의 경우 정해 놓은 시간 혹은 24시간 / 패키지는 정해놓은 시간)

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  timeCostInfos      TimeCostInfo[]
  reservations       ReservationRentalType[]
  additionalServices AdditionalService[]
}

//INFO: 시간별 예약 추가 정보
model TimeCostInfo {
  id         String  @id @default(uuid())
  cost       Int     @db.MediumInt
  time       Int     @db.TinyInt
  isPossible Boolean @default(true)

  rentalTypeId String
  rentalType   RentalType @relation(fields: [rentalTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ReservedAdditionalService {
  reservationId       String
  reservation         Reservation       @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  additionalServiceId String
  additionalService   AdditionalService @relation(fields: [additionalServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  count               Int               @default(1)

  @@id([reservationId, additionalServiceId])
}

model ReservationRentalType {
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rentalTypeId  String
  rentalType    RentalType  @relation(fields: [rentalTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  startAt       Int
  endAt         Int

  @@id([reservationId, rentalTypeId])
}

//INFO: 예약 정보
model Reservation {
  id String @id @unique @default(uuid())

  year                Int       @db.SmallInt
  month               Int       @db.TinyInt
  day                 Int       @db.TinyInt
  code                String    @unique @db.VarChar(25)
  totalCost           Int       @db.MediumInt //INFO: 결제 금액 (originalCost - discountCost)
  vatCost             Int       @db.MediumInt //INFO: VAT 금액
  discountCost        Int       @default(0) @db.MediumInt //INFO: 할인금액 -> 유저 입장에서 할인되는 금액 (모든 쿠폰 정보가 포함)
  serviceDiscountCost Int       @default(0) @db.MediumInt
  originalCost        Int       @db.MediumInt //INFO: 총액 -> 할인가가 적용되지 않은 금액
  userCount           Int
  orderId             String?   @unique //INFO: 주문 번호
  orderResultId       String?   @unique //INFO: 주문 결과 번호 
  payMethod           String?
  isApproved          Boolean   @default(true) //INFO: 결제 승인 여부
  approvedAt          DateTime?
  receiptUrl          String?   @db.VarChar(255) //INFO: 영수증 URL
  userName            String?
  userPhoneNumber     String?   @db.VarChar(11)
  payedAt             DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?

  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  settlementId String?
  settlement   Settlement? @relation(fields: [settlementId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  spaceId      String
  space        Space       @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  spaceReviews       SpaceReview[]
  userCoupon         UserCoupon[]
  additionalServices ReservedAdditionalService[]
  rentalTypes        ReservationRentalType[]
  cancel             ReservationCancel?
}

model ReservationCancel {
  id String @id @unique @default(uuid())

  reason     String   @db.VarChar(255)
  refundCost Int?     @db.MediumInt
  createdAt  DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  hostId String?
  host   Host?   @relation(fields: [hostId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  reservationId String      @unique
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BlockedTime {
  id String @id @unique @default(uuid())

  year    Int
  month   Int
  day     Int
  startAt Int @db.TinyInt
  endAt   Int @db.TinyInt

  name String @db.VarChar(120)

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 정산 정보
model Settlement {
  id String @id @default(uuid())

  year  Int
  month Int
  day   Int

  settlementCost Int @db.MediumInt //INFO: 정산 금액
  totalCost      Int @db.MediumInt //INFO: 최종 매출 금액 (originalCost - discountCost)
  vatCost        Int @db.MediumInt //INFO: VAT 금액
  discountCost   Int @default(0) @db.MediumInt //INFO: 할인금액 -> 업주랑 같이 부담하는 할인 금액 (우리가 제공하는 할인은 제외)
  originalCost   Int @db.MediumInt //INFO: 총액 -> 할인가가 적용되지 않은 금액
  lupinCost      Int @default(0) @db.MediumInt //INFO: 루팡 수수료
  lupinVatCost   Int @default(0) @db.MediumInt //INFO: 루팡 수수료 VAT

  isPayed Boolean @default(false)

  deletedAt DateTime?

  reservations Reservation[]
  hostId       String
  host         Host          @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 세금 신고
model TaxReturn {
  id String @id @default(uuid())

  year  Int
  month Int

  cost Int @db.MediumInt //INFO: 신고 금액

  receiptUrl  String?
  submittedAt DateTime?
  deletedAt   DateTime?

  hostId String
  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 공간 신고 (신고가 있는 공간은 유저에게 보이면 안됨)
model UserReport {
  id String @id @default(uuid())

  reportStatus Int @default(1) @db.TinyInt // 1 = 처리중, 2 = 처리완료

  content String @db.MediumText

  spaceId       String?
  space         Space?       @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceReviewId String?
  spaceReview   SpaceReview? @relation(fields: [spaceReviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceQnAId    String?
  spaceQnA      SpaceQnA?    @relation(fields: [spaceQnAId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  answers UserReportAnswer[]
}

//INFO: 공간 신고 답변
model UserReportAnswer {
  id String @id @default(uuid())

  content String @db.MediumText

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  adminId  String
  admin    Admin      @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportId String
  report   UserReport @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 공간 QnA
model SpaceQnA {
  id String @id @default(uuid())

  content String @db.MediumText

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  answers   SpaceQnAAnswer[]
  histories History[]
  reports   UserReport[]
}

//INFO: QnA 답변은 host(공간주인)가 다는건지 Admin(통합관리자)이 다는건지
model SpaceQnAAnswer {
  id      String @id @default(uuid())
  content String @db.MediumText

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  spaceQnAId String
  spaceQnA   SpaceQnA  @relation(fields: [spaceQnAId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostId     String
  host       Host      @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  histories  History[]
}

//INFO: 공간 리뷰
model SpaceReview {
  id      String @id @default(uuid())
  content String @db.MediumText
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  score   Int    @db.TinyInt

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  images    SpaceReviewImage[]
  answers   SpaceReviewAnswer[]
  reports   UserReport[]
  histories History[]
}

//INFO: 공간 리뷰 이미지
model SpaceReviewImage {
  id            String      @id @default(uuid())
  spaceReviewId String
  spaceReview   SpaceReview @relation(fields: [spaceReviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId       String
  image         Image       @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isBest        Boolean     @default(false)
}

model SpaceReviewAnswer {
  id      String @id @default(uuid())
  content String @db.MediumText

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  hostId    String
  host      Host        @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId  String
  review    SpaceReview @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  histories History[]
}

model History {
  id String @id @default(uuid())

  content String @db.MediumText

  writtenAt DateTime

  spaceReviewAnswerId String?
  spaceReviewAnswer   SpaceReviewAnswer? @relation(fields: [spaceReviewAnswerId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  spaceQnAAnswerId    String?
  spaceQnAAnswer      SpaceQnAAnswer?    @relation(fields: [spaceQnAAnswerId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  spaceQnAId          String?
  spaceQnA            SpaceQnA?          @relation(fields: [spaceQnAId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  spaceReviewId       String?
  spaceReview         SpaceReview?       @relation(fields: [spaceReviewId], references: [id], onDelete: SetNull, onUpdate: SetNull)
}

//INFO: 관심있는 공간 (마이페이지에서 확인 가능)
model SpaceInterest {
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, spaceId])
}

//INFO: 공간 사진
model SpaceImage {
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId String
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  orderNo Int? @db.TinyInt

  @@id([spaceId, imageId])
}

//INFO: 공간 환불 정보
model RefundPolicy {
  id String @id @default(uuid())

  daysBefore Int @db.TinyInt
  refundRate Int @db.TinyInt

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SpaceCaution {
  id      String @id @default(uuid())
  content String
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SpaceBuilding {
  spaceId    String
  space      Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceId, buildingId])
}

model SpaceService {
  spaceId   String
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceId, serviceId])
}

model SpaceCategory {
  spaceId    String
  space      Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceId, categoryId])
}

model SpaceHashTag {
  spaceId   String
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hashTagId String
  hashTag   HashTag @relation(fields: [hashTagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([spaceId, hashTagId])
}

//INFO: 공간주인
model Host {
  id String @id @default(uuid())

  name         String    @db.VarChar(20)
  email        String    @unique
  profileImage String?
  phoneNumber  String    @db.Char(11)
  password     String
  salt         String
  isBlocked    Boolean   @default(false)
  unBlockAt    DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  spaces          Space[]
  spaceQnAAnswers SpaceQnAAnswer[]

  hostAccount        HostAccount?
  taxReturns         TaxReturn[]
  spaceReviewAnswers SpaceReviewAnswer[]
  settlements        Settlement[]

  ReservationCancel ReservationCancel[]
}

//INFO: 공간주 사업자 및 계좌 정보
model HostAccount {
  id String @id @default(uuid())

  bankCode                   String  @db.Char(3)
  businessRegistrationNumber String? @db.Char(10)
  businessRegistrationFile   String?
  businessName               String?
  account                    String  @db.VarChar(40)
  accountOwner               String  @db.VarChar(20)

  hostId String @unique
  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 통합 관리자
model Admin {
  id         String  @id @default(uuid())
  name       String  @db.VarChar(20)
  userId     String  @unique
  password   String
  salt       String
  isAccepted Boolean @default(false)

  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
  reportAnswers UserReportAnswer[]
}

model User {
  id String @id @default(uuid())

  name           String?
  nickname       String
  email          String?
  phoneNumber    String?   @db.Char(11)
  birthYear      String?   @db.Char(4)
  birthDay       String?   @db.Char(4)
  gender         Int?      @db.TinyInt
  profileImage   String?
  isBlocked      Boolean   @default(false)
  unBlockAt      DateTime?
  pushToken      String?
  portOneCertKey String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  blockedAt DateTime?
  loginedAt DateTime?

  spaceReviews   SpaceReview[]
  reports        UserReport[]
  spaceInterests SpaceInterest[]
  spaceQnAs      SpaceQnA[]
  locations      UserLocation[]
  coupons        UserCoupon[]
  socials        UserSocial[]
  curations      Curation[]
  searchRecords  SearchRecord[]
  alarms         UserAlarm[]
  reservations   Reservation[]
  recentSpaces   RecentSpace[]
  faqs           FAQ[]

  ReservationCancel ReservationCancel[]
  setting           UserSetting?
}

model UserSetting {
  id String @id @default(uuid())

  isAdult                Boolean @default(false)
  isAlarmAccepted        Boolean @default(false)
  isLocationInfoAccepted Boolean @default(false)
  isEmailAccepted        Boolean @default(false)
  isKakaoTalkAccepted    Boolean @default(false)
  isPushAccepted         Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserAlarm {
  id String @id @default(uuid())

  title   String  @db.VarChar(50)
  content String
  link    String?

  alarmAt   DateTime?
  isRead    Boolean   @default(false)
  isPush    Boolean   @default(false)
  isPushed  Boolean   @default(false)
  alarmType Int       @db.TinyInt

  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 유저 검색 기록
model SearchRecord {
  id String @id @default(uuid())

  content String

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 추천 검색어
model SearchRecommend {
  id String @id @default(uuid())

  content String
}

model UserSocial {
  id         String @id @default(uuid())
  userId     String
  socialId   String @unique
  socialType Int    @db.TinyInt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//INFO: 유저는 여러 위치를 지정 가능
model UserLocation {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isDefault  Boolean  @default(false)
}

model SpaceLocation {
  id           String @id @default(uuid())
  lat          String @db.VarChar(120)
  lng          String @db.VarChar(120)
  roadAddress  String
  jibunAddress String
  spaceId      String @unique
  space        Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Location {
  id            String         @id @default(uuid())
  lat           String         @db.VarChar(120)
  lng           String         @db.VarChar(120)
  roadAddress   String
  jibunAddress  String
  userLocations UserLocation[]
}

//INFO: 공간 시설
model Building {
  id String @id @default(uuid())

  name           String
  spaceBuildings SpaceBuilding[]

  icon   Icon   @relation(fields: [iconId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  iconId String
}

model ServiceTitle {
  id   String @id @default(uuid())
  name String @db.VarChar(20)

  services Service[]
}

//INFO: 이용 가능한 서비스
model Service {
  id String @id @default(uuid())

  name String @db.VarChar(20)

  spaceServices  SpaceService[]
  serviceTitle   ServiceTitle?  @relation(fields: [serviceTitleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceTitleId String?

  icon   Icon   @relation(fields: [iconId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  iconId String
}

//INFO: 활용 가능한 카테고리 (ex. 회의실, 스터디룸, 세미나실, 오픈스페이스 등)
model Category {
  id            String  @id @default(uuid())
  name          String  @db.VarChar(80)
  isHome        Boolean @default(false)
  isRecommended Boolean @default(false)

  spaceUsageCategories SpaceCategory[]

  icon   Icon?   @relation(fields: [iconId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  iconId String?
}

model ContentCategory {
  id             String                 @id @default(uuid())
  name           String                 @db.VarChar(80)
  highlight      String?                @db.VarChar(80)
  spaces         ContentCategorySpace[]
  homeContents   HomeContents?          @relation(fields: [homeContentsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homeContentsId String?                @unique

  deletedAt DateTime?
}

model ContentCategorySpace {
  orderNo           Int?
  contentCategoryId String
  contentCategory   ContentCategory @relation(fields: [contentCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId           String
  space             Space           @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([contentCategoryId, spaceId])
}

//INFO: 해시태그
model HashTag {
  id            String         @id @default(uuid())
  name          String
  spaceHashTags SpaceHashTag[]
}

//INFO: 유저 쿠폰
model UserCoupon {
  id String @id @default(uuid())

  usageDateStartAt DateTime  @db.DateTime
  usageDateEndAt   DateTime  @db.DateTime
  createdAt        DateTime  @default(now())
  deletedAt        DateTime?

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  couponId String
  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

//INFO: 쿠폰
model Coupon {
  id                  String    @id @default(uuid())
  name                String    @db.VarChar(80)
  discountType        Int       @db.TinyInt //INFO: 0: 정액, 1: 정률
  discountValue       Int       @db.MediumInt
  description         String    @db.VarChar(100)
  code                String    @unique @db.Char(10)
  isLupinPay          Boolean   @default(false)
  defaultDueDateStart DateTime? @db.DateTime
  defaultDueDay       Int       @default(0) @db.SmallInt
  link                String?

  deletedAt DateTime?

  userCoupons UserCoupon[]

  exhibitions ExhibitionCoupon[]
}

model ExhibitionImage {
  exhibitionId String
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId      String
  image        Image      @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([exhibitionId, imageId])
}

model ExhibitionSpace {
  exhibitionId String
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId      String
  space        Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  orderNo Int? @db.TinyInt

  @@id([exhibitionId, spaceId])
}

model ExhibitionCoupon {
  exhibitionId String
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  couponId     String
  coupon       Coupon     @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([exhibitionId, couponId])
}

model Exhibition {
  id String @id @default(uuid())

  title       String @db.VarChar(80)
  thumbnail   String
  description String @db.VarChar(120)

  content String @db.MediumText

  startAt DateTime @db.DateTime
  endAt   DateTime @db.DateTime

  isShow Boolean @default(false)

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  images         ExhibitionImage[]
  spaces         ExhibitionSpace[]
  coupons        ExhibitionCoupon[]
  homeContents   HomeContents?      @relation(fields: [homeContentsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homeContentsId String?            @unique
}
